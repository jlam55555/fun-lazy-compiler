module Evaluators.GMachine.DumpAsm
  ( exportAsm
  ) where

import           Evaluators.GMachine.State

import           Alloc
import           Iseq

tab :: Iseq -> Iseq
tab iseq = iAppend (iStr "    ") $ iIndent iseq

-- Export the opcodes for a compiled program. Is intended to
-- be exported to x86-64 NASM using the flc-transpiler shim.
--
-- Tasks:
-- - Informational header.
-- - Export heap nodes to the .data region.
--
-- A more thorough implementation can export an arbitrary
-- program state. This is simplified to only handle a just-
-- compiled state (i.e., stack is empty, heap only contains
-- supercombinators, and the queued instructions are:
--   pushglobal main
--   unwind
-- A more complicated implementation will also rebuild the
-- stack before queueing the instructions.)
-- 
-- Extra goodies to work with `flc-transpiler`:
-- - Base pointer is set to point to the first stack element.
exportAsm :: GmState -> String
exportAsm state = iDisplay
  $ iInterleave iNewline [exportHeader, exportMain, exportHeap state]
  where exportHeader = iStr "; generated by flc" `iAppend` iNewline

-- Set base pointer, set up initial queued instructions
exportMain :: Iseq
exportMain = iInterleave
  iNewline
  [ tab $ iInterleave iNewline [iStr "section .text", iStr "global main"]
  , iStr "main:"
  , tab $ iInterleave
    iNewline
    [iStr . show $ Pushglobal "main", iStr "mov rbp, rsp", iStr . show $ Unwind]
  ]

-- Export heap items in data region. Since we assume that this is an initial
-- program state, we assume that all heap items are supercombinators and exist
-- in the environment
exportHeap :: GmState -> Iseq
exportHeap state = iInterleave iNewline $ exportScNode <$> gmEnv state
 where
  exportInsts code = iInterleave iNewline $ iStr . show <$> code
  exportScNode (f, a) = iInterleave
    iNewline
    [ tab $ iStr "section .data"
    , iStr $ f ++ ".node:"
    , tab $ iStr $ "dq TAG_GLOBAL\ndq " ++ show n ++ "\ndq " ++ f ++ ".sc\n"
    , tab $ iStr "section .text"
    , iStr $ f ++ ".sc:"
    , tab $ exportInsts code
    ]
    where NGlobal n code = hLookup (gmHeap state) a
